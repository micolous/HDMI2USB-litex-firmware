
luma_rom_100 = [
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
]

luma_rom_85 = [
    0x05, 0x03, 0x04, 0x04, 0x04, 0x03, 0x05, 0x04,
    0x04, 0x04, 0x05, 0x05, 0x05, 0x06, 0x07, 0x0C,
    0x08, 0x07, 0x07, 0x07, 0x07, 0x0F, 0x0B, 0x0B,
    0x09, 0x0C, 0x11, 0x0F, 0x12, 0x12, 0x11, 0x0F,
    0x11, 0x11, 0x13, 0x16, 0x1C, 0x17, 0x13, 0x14,
    0x1A, 0x15, 0x11, 0x11, 0x18, 0x21, 0x18, 0x1A,
    0x1D, 0x1D, 0x1F, 0x1F, 0x1F, 0x13, 0x17, 0x22,
    0x24, 0x22, 0x1E, 0x24, 0x1C, 0x1E, 0x1F, 0x1E
]

luma_rom_75 = [
    0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08, 0x07,
    0x07, 0x07, 0x09, 0x09, 0x08, 0x0A, 0x0C, 0x14,
    0x0D, 0x0C, 0x0B, 0x0B, 0x0C, 0x19, 0x12, 0x13,
    0x0F, 0x14, 0x1D, 0x1A, 0x1F, 0x1E, 0x1D, 0x1A,
    0x1C, 0x1C, 0x20, 0x24, 0x2E, 0x27, 0x20, 0x22,
    0x2C, 0x23, 0x1C, 0x1C, 0x28, 0x37, 0x29, 0x2C,
    0x30, 0x31, 0x34, 0x34, 0x34, 0x1F, 0x27, 0x39,
    0x3D, 0x38, 0x32, 0x3C, 0x2E, 0x33, 0x34, 0x32
]

luma_rom_50 = [
    0x10, 0x0B, 0x0C, 0x0E, 0x0C, 0x0A, 0x10, 0x0E,
    0x0D, 0x0E, 0x12, 0x11, 0x10, 0x13, 0x18, 0x28,
    0x1A, 0x18, 0x16, 0x16, 0x18, 0x31, 0x23, 0x25,
    0x1D, 0x28, 0x3A, 0x33, 0x3D, 0x3C, 0x39, 0x33,
    0x38, 0x37, 0x40, 0x48, 0x5C, 0x4E, 0x40, 0x44,
    0x57, 0x45, 0x37, 0x38, 0x50, 0x6D, 0x51, 0x57,
    0x5F, 0x62, 0x67, 0x68, 0x67, 0x3E, 0x4D, 0x71,
    0x79, 0x70, 0x64, 0x78, 0x5C, 0x65, 0x67, 0x63
]

chroma_rom_100 = [
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
]

chroma_rom_85 = [
    0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08, 0x07,
    0x07, 0x07, 0x09, 0x09, 0x08, 0x0A, 0x0C, 0x14,
    0x0D, 0x0C, 0x0B, 0x0B, 0x0C, 0x19, 0x12, 0x13,
    0x0F, 0x14, 0x1D, 0x1A, 0x1F, 0x1E, 0x1D, 0x1A,
    0x1C, 0x1C, 0x20, 0x24, 0x2E, 0x27, 0x20, 0x22,
    0x2C, 0x23, 0x1C, 0x1C, 0x28, 0x37, 0x29, 0x2C,
    0x30, 0x31, 0x34, 0x34, 0x34, 0x1F, 0x27, 0x39,
    0x3D, 0x38, 0x32, 0x3C, 0x2E, 0x33, 0x34, 0x32
]

chroma_rom_75 = [
    0x09, 0x09, 0x09, 0x0C, 0x0B, 0x0C, 0x18, 0x0D,
    0x0D, 0x18, 0x32, 0x21, 0x1C, 0x21, 0x32, 0x32,
    0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32,
    0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32,
    0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32,
    0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32,
    0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32,
    0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32, 0x32
]

chroma_rom_50 = [
    0x11, 0x12, 0x12, 0x18, 0x15, 0x18, 0x2F, 0x1A,
    0x1A, 0x2F, 0x63, 0x42, 0x38, 0x42, 0x63, 0x63,
    0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
    0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
    0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
    0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
    0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63,
    0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63
]

ENCODER_START_REG = 0x0
ENCODER_IMAGE_SIZE_REG = 0x4
ENCODER_RAM_ACCESS_REG = 0x8
ENCODER_STS_REG = 0xC
ENCODER_COD_DATA_ADDR_REG = 0x10
ENCODER_LENGTH_REG = 0x14

ENCODER_QUANTIZER_RAM_LUMA_BASE = 0x100
ENCODER_QUANTIZER_RAM_CHROMA_BASE = 0x200

def encoder_write_reg(adr, value): 
    r = """
    wishbone_stb   <= '1';
    wishbone_we    <= '1';
    wishbone_cyc   <= '1';
    wishbone_adr   <= X"{:08x}";
    wishbone_dat_w <= X"{:08x}";
    wait until rising_edge(wishbone_ack);
    wishbone_stb   <= '0';
    wishbone_we    <= '0';
    wishbone_cyc   <= '0';
    wait until rising_edge(sys_clock);
    """.format(adr//4, value)
    print(r)

def encoder_config_table(base, table):
    for i, data in enumerate(table):
        encoder_write_reg(base + 4*i, data)

def encoder_init(quality):
    if quality == 100:
        encoder_config_table(ENCODER_QUANTIZER_RAM_LUMA_BASE, luma_rom_100)
        encoder_config_table(ENCODER_QUANTIZER_RAM_CHROMA_BASE, chroma_rom_100)
    elif quality == 85:
        encoder_config_table(ENCODER_QUANTIZER_RAM_LUMA_BASE, luma_rom_85)
        encoder_config_table(ENCODER_QUANTIZER_RAM_CHROMA_BASE, chroma_rom_85)
    elif quality == 75:
        encoder_config_table(ENCODER_QUANTIZER_RAM_LUMA_BASE, luma_rom_75)
        encoder_config_table(ENCODER_QUANTIZER_RAM_CHROMA_BASE, chroma_rom_75)
    else:
        encoder_config_table(ENCODER_QUANTIZER_RAM_LUMA_BASE, luma_rom_50)
        encoder_config_table(ENCODER_QUANTIZER_RAM_CHROMA_BASE, chroma_rom_50)

def encoder_start(resx, resy):
    encoder_write_reg(ENCODER_IMAGE_SIZE_REG, (resx << 16) | resy);
    encoder_write_reg(ENCODER_START_REG, 7); # RGB, SOF

encoder_init(100)
encoder_start(256, 256)
